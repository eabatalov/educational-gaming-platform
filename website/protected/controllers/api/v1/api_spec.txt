EGP RESTful API v1 specification.

//TODO Add pagination to all the collections
//TODO Add facebook hybrid auth
//TODO remove all old authentication classes
//TODO remove PHP session dependency
===============================
MAKING API REQUESTS

For security reasons all the interactions are performed via HTTPS.
To unify things, all the API requests and responses data is represented in the form of JSON objects.
In the following spec we'll refer to request JSON object as "REQUEST" and response JSON object as "RESPONSE".

REQUEST object should be the body of request for all the HTTP request methods except GET.
In case of GET request, set GET request parameter "request" of your URL to the url encoded REQUEST value.
Example: https://learzing.com/api/user?request={%20userid:%20%2213rfefv39fj3f48j9838&#&#&"}

RESPONSE object is always passed in the body of your API response and has the following layout:
{
  status: STATUS - defines status of requested operation. See STATUS values description below.
  texts: [String] List of human readable status explanation strings in current user's locale or in English.
  data: service dependent field defined in documentation as RETURNS.
}
STATUS values:
- "SUCCESS": operation is completed successfully.
- "AUTHORIZATION_FAILED": returned when current user doesn't have sufficient permissions
   to perform requested operation.
- "INVALID_ARGUMENT": argument passed to operation has invalid value.
- "INTERNAL_ERROR": internal server error occured.

To perform authorization of your API request you need to supply access token in HTTP header:
"Authorization: <token_type> <access_token>"
or HTTPS cookie "LEARZING_API_TOKEN" which contains <access_token>
You obtain <token_type> and <access_token> from GET request to service auth/token.

+++++++++++++++++++++++++++++++
API SERVICES DESCRIPTION
URLs of all API services have the following form: /api/<service_name>

===============================
service_name: auth/token
API USER AUTHENTICATION SERVICE
HTTP methods:
GET: get AccessTokenInfo object to use for authorization of API requests and authentication
    as user with email @email and password @password. @client_id is your app id which you got
    from Learzing.
    REQUEST: { email: String, password: String, client_id: String }
    RETURNS: AccessTokenInfo

DELETE: revoke (make invalid) @access_token. Also pass your client's @client_id which you got
    from Learzing.
    REQUEST: { access_token: String, client_id: String }

Javascript types:
AccessTokenInfo: { access_token: String, token_type: String }
===============================
service_name: user
HTTP methods:
GET: get User object with id @userid and all the information avaliable for current user
    REQUEST: { userid : String, [fields : FieldsFilter] }
    RETURNS: User
	
POST: register new @user object with password @password. No access token is needed to perform the action.
    After successful creation of user, get access token using API authentication endpoint.
    REQUEST: { user: user, password : String }

PUT: replace current user object with @user object supplied (update scenario)
    REQUEST: User

DELETE (): not implemented

Javascript types:
User: { id: String, email: String, name: String, surname: String, is_online: "true"|"false", role: UserRole }
UserRole: "customer" or ...
FieldsFilter: [String]
FieldsFIlter: if set, determines fields which will be returned from server in RETURNS object.
===============================
service_name: friends
HTTP methods:
GET: get list of friends visible to current user of user with id @userid
    REQUEST : { userid : String, [fields : FieldsFilter, paging : Paging] }
    RETURNS: { friends : [User], paging : Paging }

POST: add new friend with id @userid to current user's friend list
    REQUEST : { userid : String }

PUT: not implemented

DELETE:  delete current user's friend with id @userid
    REQUEST : { userid : String }

Javascript types:
Paging: { offset: String, limit: Int64, [total : Int64] }
Paging: if set in REQUEST, asks to return only limited set of objects in RETURNS set.
When set in RETURNS, specify what actually was returned.
Paging.offset - number which determines the first item of RETURNS collection starting from 0.
If specified in api methods explicitly,
you can use LAST or LAST-x special values to count from the end of RETURNS collection.
Paging.limit - number which determines maximum size of RETURNS collection.
Paging.total - number which determines total size of RETURNS collection.
Paging.total is ignored when Paging is inside REQEUST object.
===============================
service_name: messaging
HTTP methods:
GET: get list of messages in conversation of current user and user with id @userid.
    REQUEST: { userid : String, [fields : FieldsFilter, paging : Paging] }
        paging.offset LAST value can be used
    RETURNS: [Message]

POST: send message with body @text from current user to user with id @userid
    REQUEST: { userid : String, text : String }

PUT: not implemented

DELETE: not implemented

Javascript types:
Message: { from: userid, to: userid, date: string/date JS type, time: string/time JS type: body: string }
===============================
service_name: search
HTTP methods:
GET: Get search results for query @query looking for objects of type @object_type.
    REQUEST: { query : String, object_type = SearchObjectType, [paging : Paging] }
    RETURNS: { search_results: [ SearchResult ] }

Javascript types:
SearchResult: { object_type : SearchObjectType, object : Object }
SearchObjectType: "all" | "user" | ...
Object : User | ...
===============================
service_name: skills
HTTP methods:
GET: Get all skills of user with id @user_id
    REQUEST: { user_id : String, [fields : FieldsFilter, paging : Paging] }
    RETURNS: [ UserSkill ]

PUT: set current user's skill with @skill_id to value @value.
    Setting skill @value is only allowed for leaf skill nodes.
    REQUEST: { skill_id : String, value : Int32 }

Javascript types:
UserSkill: { user_id : String, skill_id : String, value : Int32 }
    skillid : you can find human readable values for all the skill ids in SDK file "skills.js"

Global vars:
    LEARZ.consts.SKILLS : map skillid => { id : String, name : String, parent_id : String, is_leaf : bool }
        Contains all the skills avaliable now.
===============================