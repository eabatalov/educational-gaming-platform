<?php

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-10-29 at 02:58:03.
 */
class UserTest extends \PHPUnit_Framework_TestCase {

    const EMAIL_SUFFIX = "email@example.com";
    const NAME_SUFFIX = "name";
    const SURNAME_SUFFIX = "surname";
    const IS_ACTIVE = FALSE;
    const ROLE = UserRole::CUSTOMER;

    protected function mkUser($id = "0", $email = self::EMAIL_SUFFIX) {
        $fields = array(
            "id" => $id,
            "email" => $email
        );
        return $this->mkUserFromArray($fields);
    }

    protected function mkUserFromArray($fields) {
        $id = array_key_exists("id", $fields) ? $fields['id'] : "0";
        $email = array_key_exists("email", $fields) ? $fields['email'] : $id . self::EMAIL_SUFFIX;
        $name = array_key_exists("name", $fields) ? $fields['name'] : $id . self::NAME_SUFFIX;
        $surname = array_key_exists("surname", $fields) ? $fields['surname'] : $id . self::SURNAME_SUFFIX;
        $isActive = array_key_exists("isActive", $fields) ? $fields['isActive'] : self::IS_ACTIVE;
        $role = array_key_exists("role", $fields) ? $fields['role'] : self::ROLE;
        return new User($email, $name, $surname, $isActive,
                            $role, $id);
    }

    /**
     * @covers model\User::getId
     */
    public function testGetId() {
        assert($this->mkUser("0")->getId() == "0");
    }

    /**
     * @covers model\User::getEmail
     */
    public function testGetEmail() {
        $email = "test@example.com";
        assert($this->mkUser("0", $email)->getEmail() == $email);
    }

    /**
     * @covers model\User::getName
     */
    public function testGetName() {
        $id = "0";
        assert($this->mkUser($id)->getName() == $id . UserTest::NAME_SUFFIX);
    }

    /**
     * @covers model\User::getSurname
     */
    public function testGetSurname() {
        $id = "0";
        assert($this->mkUser($id)->getSurname() == $id . UserTest::SURNAME_SUFFIX);
    }

    /**
     * @covers model\User::getIsActive
     */
    public function testGetIsActive() {
        assert($this->mkUser()->getIsActive() == UserTest::IS_ACTIVE);
    }

    /**
     * @covers model\User::getRole
     */
    public function testGetRole() {
        $id = "0";
        assert($this->mkUser($id)->getRole() == self::ROLE);
    }

    public function testChangesTracking() {
        $id = "0";
        $changes = $this->mkUser($id)->getValueChanges();
        assert(empty($changes));
    }

    /*
     * @covers User::rules()
     */
    public function testValidation() {
        assert($this->mkUser()->validate(),
                var_export($this->mkUser(), true) .
                var_export($this->mkUser()->getErrors(), true));

        assert(!$this->mkUserFromArray(array("email" => ""))->validate(),
                "empty email");
        assert(!$this->mkUserFromArray(array("email" => "0"))->validate(),
                "invalid email");
        assert(!$this->mkUserFromArray(array("name" => ""))->validate(),
                "empty name");
        assert(!$this->mkUserFromArray(array("surname" => ""))->validate(),
                "empty surname");
        $str240 =
            "12345678901234567890" . "12345678901234567890" .
            "12345678901234567890" . "12345678901234567890" .
            "12345678901234567890" . "12345678901234567890" .
            "12345678901234567890" . "12345678901234567890" .
            "12345678901234567890" . "12345678901234567890" .
            "12345678901234567890" . "12345678901234567890";
        assert(!$this->mkUserFromArray(array("name" => $str240))->validate(),
                "too long name");
    }
}
