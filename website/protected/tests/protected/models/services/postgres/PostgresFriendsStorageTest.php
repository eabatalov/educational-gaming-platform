<?php

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-11-05 at 00:38:35.
 */
class PostgresFriendsStorageTest extends PostgresTest {

    /**
     * @var PostgresFriendsStorage
     */
    static protected $storage;
    static protected $user;
    static protected $friends;
    const PASSWORD = "777secret";
    const EMAIL = "postgres_friends_storage_test@example.com";

    static public function setUpBeforeClass() {
        parent::setUpBeforeClass();
        self::$storage = new PostgresFriendsStorage();
        self::$storage->addUser(UserTest::mkUserFromArray(array('email' => self::EMAIL)),
            self::PASSWORD);
        self::$user = self::$storage->getUser(self::EMAIL);
        
        self::$friends = array();
        for ($i = 0; $i < 3; ++$i) {
            $fr_email = strval($i) . "friend" . self::EMAIL;
            $friend = UserTest::mkUserFromArray(array('email' => $fr_email));
            self::$storage->addUser($friend, self::PASSWORD);
            self::$friends[$i] = self::$storage->getUser($friend->getEmail());
        }
    }

    /**
     * @covers PostgresCustomerStorage::__construct
     */
    public function testConstruct() {
        $st1 = new PostgresFriendsStorage();
        $st2 = new PostgresFriendsStorage();
        $st3 = new PostgresFriendsStorage();
    }

    /**
     * @covers PostgresFriendsStorage::addFriend
     */
    public function testAddFriend() {
        for ($i = 0; $i < 3; ++$i) {
            self::$storage->addFriend(self::$user->getId(), self::$friends[$i]->getId());
        }
    }

    /**
     * @covers PostgresFriendsStorage::getUserFriends
     */
    public function testGetUserFriends() {
        $paging = new Paging();
        $friends = self::$storage->getUserFriends(self::$user->getId(), $paging);
        $foundFriends = 0;
        for ($i = 0; $i < count($friends); ++$i) {
            for ($j = 0; $j < count(self::$friends); ++$j) {
                if ($friends[$i]->getId() === self::$friends[$j]->getId())
                    ++$foundFriends;
            }
        }
        assert($foundFriends === count(self::$friends));
        assert(count($friends) === count(self::$friends));
        assert($paging->getTotal() === count(self::$friends));
    }

    const FRIEND_TO_DELETE_IX = 0;
    /**
     * @covers PostgresFriendsStorage::delFriend
     */
    public function testDelFriend() {
        self::$storage->delFriend(self::$user->getId(),
            self::$friends[self::FRIEND_TO_DELETE_IX]->getId());

        $paging = new Paging();
        $friends = self::$storage->getUserFriends(self::$user->getId(), $paging);
        for ($i = 0; $i < count($friends); ++$i) {
            assert($friends[$i]->getId() !== self::$friends[self::FRIEND_TO_DELETE_IX]->getId());
        }

        assert(count($friends) === count(self::$friends) - 1);
        assert($paging->getTotal() === count(self::$friends) - 1);
    }

    /**
     * @covers PostgresFriendsStorage::hasFriend
     */
    public function testHasFriend() {
        for ($i = 0; $i < count(self::$friends); ++$i) {
            if ($i === self::FRIEND_TO_DELETE_IX)
                assert(!self::$storage->hasFriend(self::$user->getId(), self::$friends[$i]->getId()));
            else
                assert(self::$storage->hasFriend(self::$user->getId(), self::$friends[$i]->getId()));
        }
    }
}