<?php

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-10-30 at 03:10:18.
 */
class AuthentificatedUserTest extends PHPUnit_Framework_TestCase {

    const PASS_SUFFIX = "password";

    protected function mkUser($id_ = NULL, $email_ = NULL) {
        $id = $id_ == NULL ? "0" : $id_;
        $email = $email_ == NULL ? $id . UserTest::EMAIL_SUFFIX : $email_;
        $name = $id . UserTest::NAME_SUFFIX;
        $surname = $id . UserTest::SURNAME_SUFFIX;
        $isActive = UserTest::IS_ACTIVE;
        $userDesc = $id . UserTest::DESCR_SUFFIX;
        $role = new UserRole(UserTest::ROLE);
        $pass = $id . AuthentificatedUserTest::PASS_SUFFIX;
        return new AuthentificatedUser($email, $name, $surname, $isActive,
            $userDesc, $role, $pass, $id);
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers AuthentificatedUser::getPassword
     */
    public function testGetPassword() {
        $id = "0";
        assert($this->mkUser()->getPassword() ==
            $id . AuthentificatedUserTest::PASS_SUFFIX);
    }

    /**
     * @covers All the change tracking setters of AuthentificatedUser class
     */
    public function testNoChangesTracking() {
        $user = $this->mkUser();

        $oldEmail = $user->getEmail();
        $oldName = $user->getName();
        $oldSurname = $user->getSurname();
        $oldPassword = $user->getPassword();
        $oldIsActive = $user->getIsActive();
        $oldUserDesc = $user->getDescription();
        $oldRole = $user->getRole();

        $newEmail = $oldEmail;
        $newName = $oldName;
        $newSurname = $oldSurname;
        $newPassword = $oldPassword;
        $newIsActive = $oldIsActive;
        $newUserDesc = $oldUserDesc;
        $newRole = $oldRole;

        $user->setEmail($newEmail);
        $user->setName($newName);
        $user->setSurname($newSurname);
        $user->setPassword($newPassword);
        $user->setIsActive($newIsActive);
        $user->setDescription($newUserDesc);
        $user->setRole($newRole);

        $changes = $user->getValueChanges();
        assert(empty($changes));
    }

    /**
     * @covers All the change tracking setters of AuthentificatedUser class
     */
    public function testRealChangesTracking() {
        //TODO play with fields assignments here
        $user = $this->mkUser();

        $oldEmail = $user->getEmail();
        $oldName = $user->getName();
        $oldSurname = $user->getSurname();
        $oldPassword = $user->getPassword();
        $oldIsActive = $user->getIsActive();
        $oldUserDesc = $user->getDescription();
        $oldRole = $user->getRole();

        $NEW_PREFIX = "new_";
        $newEmail = $NEW_PREFIX . $oldEmail;
        $newName = $NEW_PREFIX . $oldName;
        $newSurname = $NEW_PREFIX . $oldSurname;
        $newPassword = $NEW_PREFIX . $oldPassword;
        $newIsActive = !$oldIsActive;
        $newUserDesc = $NEW_PREFIX . $oldUserDesc;
        $newRole = new UserRole(($oldRole->getVal() + 1) % UserRole::LAST_ROLE);

        $user->setEmail($newEmail);
        $user->setName($newName);
        $user->setSurname($newSurname);
        $user->setPassword($newPassword);
        $user->setIsActive($newIsActive);
        $user->setDescription($newUserDesc);
        $user->setRole($newRole);

        $changes = $user->getValueChanges();
        //TODO need to share names of changes not to use hardcode everywhere
        foreach ($changes as $change) {
            $field = $change->getField();
            if ($field == "id") {
                assert(FALSE, "id shouldn't change");
            } else if ($field == "name") {
                assert($change->getOldVal() == $oldName &&
                        $change->getNewVal() == $newName);
            } else if ($field == "surname") {
                assert($change->getOldVal() == $oldSurname &&
                        $change->getNewVal() == $newSurname);
            } else if ($field == "email") {
                assert($change->getOldVal() == $oldEmail &&
                        $change->getNewVal() == $newEmail);
            } else if ($field == "password") {
                assert($change->getOldVal() == $oldPassword &&
                        $change->getNewVal() == $newPassword);
            } else if ($field == "isActive") {
                assert($change->getOldVal() == $oldIsActive &&
                        $change->getNewVal() == $newIsActive);
            } else if ($field == "description") {
                assert($change->getOldVal() == $oldUserDesc &&
                        $change->getNewVal() == $newUserDesc);
            } else if ($field == "role") {
                assert($change->getOldVal() == $oldRole &&
                        $change->getNewVal() == $newRole);
            } else {
                assert(FALSE, "Unhandled change");
            }
        }
    }
}